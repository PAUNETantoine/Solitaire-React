{"ast":null,"code":"import Carte from \"./Carte\";\nclass Plateau {\n  constructor() {\n    this.cartes = this.initCartes();\n    this.tabColonnes = [];\n    this.tabFin = [[], [], [], []];\n  }\n\n  /*Méthode permettant d'initialiser les cartes du deck*/\n  initCartes() {\n    let tempTabCartes = [];\n    for (let j = 1; j < 14; j++) {\n      let nom;\n      switch (j) {\n        case 1:\n          nom = \"A\";\n          break;\n        case 11:\n          nom = \"J\";\n          break;\n        case 12:\n          nom = \"Q\";\n          break;\n        case 13:\n          nom = \"K\";\n          break;\n        default:\n          nom = j;\n          break;\n      }\n      tempTabCartes.push(new Carte(nom, j, \"Coeur\", false));\n      tempTabCartes.push(new Carte(nom, j, \"Trefle\", false));\n      tempTabCartes.push(new Carte(nom, j, \"Pique\", false));\n      tempTabCartes.push(new Carte(nom, j, \"Carreau\", false));\n    }\n    return tempTabCartes;\n  }\n\n  /*Méthode permettant de mélanger les cartes du deck et de les placer dans la pioche et dans les colonnes*/\n  melangerCartes() {\n    for (let i = this.cartes.length - 1; i > 0; i--) {\n      // Générer un index aléatoire entre 0 et i\n      const j = Math.floor(Math.random() * (i + 1));\n\n      // Échanger les éléments tableau[i] et tableau[j]\n      [this.cartes[i], this.cartes[j]] = [this.cartes[j], this.cartes[i]];\n    }\n\n    // Initialiser les sous-tableaux pour chaque colonne\n    for (let i = 0; i < 7; i++) {\n      this.tabColonnes[i] = [];\n    }\n\n    //Mise en place des colonnes\n\n    let index = 0;\n    for (let i = 0; i < 7; i++) {\n      for (let j = 0; j < i + 1; j++) {\n        if (index < 28) {\n          this.tabColonnes[i].push(this.cartes.pop());\n          index++;\n        }\n        if (j <= 0) {\n          this.tabColonnes[i][this.tabColonnes[i][j].length - 1].setEstRetournee(true);\n        }\n      }\n    }\n  }\n  ajouterCartePile(carte) {\n    switch (carte.getNom()) {\n      case \"Coeur\":\n        {\n          if (this.tabFin[0].length === 0) {\n            if (carte.getNombre() === 1) {\n              this.tabFin[0][0] = carte;\n              return;\n            }\n          } else {\n            if (carte.getNombre() === this.tabFin[0][carte.getNombre() - 1] + 1) {\n              this.tabFin[0][carte.getNombre()] = carte;\n              return;\n            }\n          }\n          break;\n        }\n      case \"Carreau\":\n        {\n          if (this.tabFin[1].length === 0) {\n            if (carte.getNombre() === 1) {\n              this.tabFin[1][0] = carte;\n              return;\n            }\n          } else {\n            if (carte.getNombre() === this.tabFin[1][carte.getNombre() - 1] + 1) {\n              this.tabFin[1][carte.getNombre()] = carte;\n              return;\n            }\n          }\n          break;\n        }\n      case \"Trefle\":\n        {\n          if (this.tabFin[2].length === 0) {\n            if (carte.getNombre() === 1) {\n              this.tabFin[2][0] = carte;\n              return;\n            }\n          } else {\n            if (carte.getNombre() === this.tabFin[2][carte.getNombre() - 1] + 1) {\n              this.tabFin[2][carte.getNombre()] = carte;\n              return;\n            }\n          }\n          break;\n        }\n      case \"Pique\":\n        {\n          if (this.tabFin[3].length === 0) {\n            if (carte.getNombre() === 1) {\n              this.tabFin[3][0] = carte;\n              return;\n            }\n          } else {\n            if (carte.getNombre() === this.tabFin[3][carte.getNombre() - 1] + 1) {\n              this.tabFin[3][carte.getNombre()] = carte;\n              return;\n            }\n          }\n          break;\n        }\n    }\n  }\n}\nexport { Plateau };","map":{"version":3,"names":["Carte","Plateau","constructor","cartes","initCartes","tabColonnes","tabFin","tempTabCartes","j","nom","push","melangerCartes","i","length","Math","floor","random","index","pop","setEstRetournee","ajouterCartePile","carte","getNom","getNombre"],"sources":["C:/Users/sandr/OneDrive/Bureau/Solitaire React/Solitaire/solitaire/src/composants/Plateau.jsx"],"sourcesContent":["import Carte from \"./Carte\"\r\n\r\nclass Plateau \r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.cartes         = this.initCartes();\r\n        this.tabColonnes    = [];\r\n        this.tabFin         = [[],[],[],[]]\r\n    }\r\n\r\n    /*Méthode permettant d'initialiser les cartes du deck*/\r\n    initCartes()\r\n    {\r\n        let tempTabCartes = [];\r\n\r\n        for(let j = 1 ; j < 14 ; j++)\r\n        {\r\n            let nom;\r\n\r\n            switch(j)\r\n            {\r\n                case 1      : nom = \"A\";    break\r\n                case 11     : nom = \"J\"; break;\r\n                case 12     : nom = \"Q\"; break;\r\n                case 13     : nom = \"K\";   break;\r\n                default     : nom = j;       break;\r\n\r\n            }\r\n\r\n            tempTabCartes.push(new Carte(nom, j, \"Coeur\",   false));\r\n            tempTabCartes.push(new Carte(nom, j, \"Trefle\",  false));\r\n            tempTabCartes.push(new Carte(nom, j, \"Pique\",   false));\r\n            tempTabCartes.push(new Carte(nom, j, \"Carreau\", false));\r\n        }\r\n\r\n        return tempTabCartes;\r\n    }\r\n\r\n\r\n    /*Méthode permettant de mélanger les cartes du deck et de les placer dans la pioche et dans les colonnes*/\r\n    melangerCartes()\r\n    {\r\n        for (let i = this.cartes.length - 1; i > 0; i--) \r\n        {\r\n            // Générer un index aléatoire entre 0 et i\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n    \r\n            // Échanger les éléments tableau[i] et tableau[j]\r\n            [this.cartes[i], this.cartes[j]] = [this.cartes[j], this.cartes[i]];\r\n        }\r\n        \r\n        // Initialiser les sous-tableaux pour chaque colonne\r\n        for (let i = 0; i < 7; i++) \r\n        {\r\n            this.tabColonnes[i] = [];\r\n        }\r\n\r\n        //Mise en place des colonnes\r\n\r\n        let index = 0;\r\n        for(let i = 0 ; i < 7 ; i++)\r\n        {\r\n            for(let j = 0 ; j < i+1 ; j++)\r\n            {\r\n                if(index < 28)\r\n                {\r\n                    this.tabColonnes[i].push(this.cartes.pop());\r\n                    index++;\r\n                }\r\n\r\n                if(j <= 0)\r\n                {\r\n                    this.tabColonnes[i][this.tabColonnes[i][j].length-1].setEstRetournee(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ajouterCartePile(carte)\r\n    {\r\n        switch(carte.getNom())\r\n        {\r\n            case \"Coeur\" : \r\n            {\r\n                if(this.tabFin[0].length === 0)\r\n                {\r\n                    if(carte.getNombre() === 1)\r\n                    {\r\n                        this.tabFin[0][0] = carte;\r\n                        return;\r\n                    }\r\n                }else{\r\n                    if(carte.getNombre() === this.tabFin[0][carte.getNombre()-1] + 1)\r\n                    {\r\n                        this.tabFin[0][carte.getNombre()] = carte;\r\n                        return;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"Carreau\" : \r\n            {\r\n                if(this.tabFin[1].length === 0)\r\n                {\r\n                    if(carte.getNombre() === 1)\r\n                    {\r\n                        this.tabFin[1][0] = carte;\r\n                        return;\r\n                    }\r\n                }else{\r\n                    if(carte.getNombre() === this.tabFin[1][carte.getNombre()-1] + 1)\r\n                    {\r\n                        this.tabFin[1][carte.getNombre()] = carte;\r\n                        return;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"Trefle\" : \r\n            {\r\n                if(this.tabFin[2].length === 0)\r\n                {\r\n                    if(carte.getNombre() === 1)\r\n                    {\r\n                        this.tabFin[2][0] = carte;\r\n                        return;\r\n                    }\r\n                }else{\r\n                    if(carte.getNombre() === this.tabFin[2][carte.getNombre()-1] + 1)\r\n                    {\r\n                        this.tabFin[2][carte.getNombre()] = carte;\r\n                        return;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case \"Pique\" : \r\n            {\r\n                if(this.tabFin[3].length === 0)\r\n                {\r\n                    if(carte.getNombre() === 1)\r\n                    {\r\n                        this.tabFin[3][0] = carte;\r\n                        return;\r\n                    }\r\n                }else{\r\n                    if(carte.getNombre() === this.tabFin[3][carte.getNombre()-1] + 1)\r\n                    {\r\n                        this.tabFin[3][carte.getNombre()] = carte;\r\n                        return;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { Plateau };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}